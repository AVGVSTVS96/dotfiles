#!/usr/bin/env bash
# Restore encrypted secrets on a new system
# Usage: restore-secrets

set -e

echo "🔐 Restoring secrets from encrypted dotfiles..."

# Check if age key exists
if [ ! -f ~/.config/sops/age/key.txt ]; then
  echo "❌ Age key not found at ~/.config/sops/age/key.txt"
  echo "Please restore your age key from backup to that location first."
  exit 1
fi

export SOPS_AGE_KEY_FILE=~/.config/sops/age/key.txt

# Restore SSH private key
echo "📝 Restoring SSH private key..."
mkdir -p ~/.ssh
chmod 700 ~/.ssh
sops -d ~/dotfiles/ssh/.ssh/id_ed25519.encrypted > ~/.ssh/id_ed25519
chmod 600 ~/.ssh/id_ed25519

# Create empty config.local if it doesn't exist
if [ ! -f ~/.ssh/config.local ]; then
  touch ~/.ssh/config.local
  chmod 600 ~/.ssh/config.local
fi

echo "✓ SSH private key restored"

# Decrypt secrets once for all operations
SECRETS=$(sops -d ~/dotfiles/zsh/secrets.env)

# Restore GitHub CLI token to macOS keyring
echo "📝 Restoring GitHub CLI token to keyring..."
# Extract token - handle both direct assignment and command substitution
GH_TOKEN=$(echo "$SECRETS" | grep "^export GITHUB_TOKEN=" | sed 's/^export GITHUB_TOKEN=//' | sed 's/^"\?\$(//' | sed 's/)"\?$//' | sed 's/^"//' | sed 's/"$//')

# If it's still a command, try to evaluate it
if [[ "$GH_TOKEN" == security* ]]; then
  GH_TOKEN=$(eval "$GH_TOKEN")
fi

if [ -n "$GH_TOKEN" ]; then
  # Add to keyring (update if exists, create if not)
  security add-generic-password -a "AVGVSTVS96" -s "gh:github.com" -w "go-keyring-base64:$(echo -n "$GH_TOKEN" | base64)" -U 2>/dev/null || \
  security add-generic-password -a "AVGVSTVS96" -s "gh:github.com" -w "go-keyring-base64:$(echo -n "$GH_TOKEN" | base64)"
  echo "✓ GitHub CLI token restored to keyring"
else
  echo "⚠️  Could not extract GitHub token"
fi

# Restore Graphite config with token
echo "📝 Restoring Graphite config..."
GRAPHITE_TOKEN=$(echo "$SECRETS" | grep "^export GRAPHITE_TOKEN=" | sed 's/^export GRAPHITE_TOKEN=//' | tr -d '"')

if [ -n "$GRAPHITE_TOKEN" ]; then
  mkdir -p ~/.config/graphite
  # Create minimal config with token (graphite adds other settings on first use)
  cat > ~/.config/graphite/user_config <<EOF
{
  "authToken": "$GRAPHITE_TOKEN",
  "pager": "bat",
  "restackCommitterDateIsAuthorDate": true,
  "editor": "nvim"
}
EOF
  echo "✓ Graphite config created"
else
  echo "⚠️  Could not extract Graphite token"
fi

echo ""
echo "✅ All secrets restored!"
echo "   • SSH key: ~/.ssh/id_ed25519"
echo "   • GitHub CLI: authenticated via keyring"
echo "   • Graphite: ~/.config/graphite/user_config"
echo ""
echo "🔄 Restart your shell or run: source ~/.zshenv"
